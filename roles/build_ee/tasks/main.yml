---
- name: Pull builder images
  containers.podman.podman_image:
    name: "{{ item }}"
    username: "{{ pah_user }}"
    password: "{{ pah_pass }}"
    force: true
  loop:
    - "{{ ee_base_image }}"
    - "{{ builder_image }}"

- name: Delete old EE
  containers.podman.podman_image:
    name: "{{ pah_name }}/{{ image_name }}"
    state: absent
    force: true

- name: Template out builder files
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ dest_dir }}{{ item }}"
    owner: root
    group: root
    mode: '0644'
  loop:
    - ansible.cfg
    - bindep.txt
    - execution-environment.yml
    - requirements.txt
    - requirements.yml

- name: Build new EE
  ansible.builtin.command:
    cmd: 'ansible-builder build -t {{ pah_name }}/{{ image_name }} --prune-images --galaxy-keyring={{ galaxy_keyring }}'
    chdir: "{{ dest_dir }}"
  changed_when: true

- name: Get Current Tags
  ansible.builtin.uri:
    url: https://{{ pah_name }}/api/galaxy/_ui/v1/execution-environments/repositories/{{ image_name }}/_content/images/?limit=100&offset=0
    user: "{{ pah_user }}"
    password: "{{ pah_pass }}"
    validate_certs: false
    force_basic_auth: true
  register: tags

- name: Determine new tag version if first position
  ansible.builtin.set_fact:
    new_version: "{{ (item[1] | float + 0.1) | round(1, 'common') }}"
  loop: "{{ tags.json.data | json_query('[*].tags') }}"
  when: item[0] | default("no") == "latest"

- name: Determine new tag version if second position
  ansible.builtin.set_fact:
    new_version: "{{ (item[0] | float + 0.1) | round(1, 'common') }}"
  loop: "{{ tags.json.data | json_query('[*].tags') }}"
  when: item[1] | default("no") == "latest"

- name: Create new tag on EE
  containers.podman.podman_tag:
    image: "{{ pah_name }}/{{ image_name }}"
    target_names:
      - "{{ pah_name }}/{{ image_name }}:{{ new_version }}"

- name: Push new EE
  containers.podman.podman_image:
    name: "{{ pah_name }}/{{ image_name }}"
    tag: "{{ item }}"
    push: true
    username: "{{ pah_user }}"
    password: "{{ pah_pass }}"
  loop:
    - "{{ new_version }}"
    - latest

- name: Remove extra tag
  containers.podman.podman_image:
    name: "{{ pah_name }}/{{ image_name }}"
    tag: "{{ new_version }}"
    state: absent

- name: Update Execution Environment Version in Controller with new version
  ansible.controller.execution_environment:
    name: "Automation Hub Shadowman execution environment"
    image: "{{ pah_name }}/{{ image_name }}:{{ new_version }}"
  delegate_to: localhost
